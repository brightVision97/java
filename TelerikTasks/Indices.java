import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

/**
 * You are given a zero-based array ARR with N integer numbers in it.
 * Each element of ARR is an index in the ARR (seems like a recursive definition, right?).
 * <p>
 * You are also given the sequence that starts from the first
 * element (0) then moves to the element with index ARR[0],
 * hen moves to the element with index ARR[ARR[0]],
 * then moves to the element with index ARR[ARR[ARR[0]]], and so onâ€¦
 * <p>
 * The full sequence is generated by performing these actions until
 * you reach an index that is outside the bounds of the array ARR.
 * Of course cycles are absolutely possible.
 * When a cycle is started in the sequence it may never reach any
 * index that is outside the bounds of the ARR.
 * <p>
 * Write a program that outputs the elements in the given sequence.
 * When you find cycle you should output it in round brackets as shown in the examples below.
 * Please note that no spaces should be printed between the brackets and the number.
 * <p>
 * Example:
 * <p>
 * Input:
 * 6
 * 1 2 3 5 7 8
 * Output:
 * 0 1 2 3 5
 */
public class Indices
{
    public static void main(String[] args)
    {
        Scanner input = new Scanner(System.in);
        
        int n = input.nextInt();
        input.nextLine();
        
        Integer[] indices =
                Arrays.stream(input.nextLine().trim().split("\\s"))
                        .map(Integer::parseInt).toArray(Integer[]::new);
        
        boolean[] visited = new boolean[indices.length];
        
        List<String> sequence = new ArrayList<>();
        sequence.add("0");
        visited[0] = true;
        
        int index = indices[0];
        while (true)
        {
            if (index < 0 || index >= indices.length)
            {
                System.out.println(String.join(" ", sequence));
                break;
            }
            
            if (visited[index])
            {
                sequence.add(sequence.indexOf(String.valueOf(index)), "(");
                sequence.add(")");
                
                System.out.println(String.join(" ", sequence)
                        .replace(" ( ", "(")
                        .replace(" )", ")")
                        .replace("( ", "("));
                break;
            }
            
            visited[index] = true;
            
            sequence.add(String.valueOf(index));
            
            index = indices[index];
        }
    }
}